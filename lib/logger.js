// Generated by CoffeeScript 1.4.0
(function() {
  var addTransport, contains, croak, debug, disable, enable, error, errorlet, isFunction, isTransportValid, logKeys, logLevel, logLevels, removeTransport, scream, setKeys, setLevel, speech, talk, transports, verbosityLevels, warn, whisper, _error, _log, _warn,
    __slice = [].slice;

  errorlet = require('errorlet');

  logLevels = {
    debug: 2,
    warn: 4,
    error: 8
  };

  logLevel = logLevels.debug;

  logKeys = {};

  verbosityLevels = {
    whisper: 2,
    talk: 4,
    speech: 8,
    scream: 16
  };

  enable = function(key) {
    return logKeys[key] = new RegExp(key);
  };

  disable = function(key) {
    return delete logKeys[key];
  };

  setLevel = function(lvl) {
    if (logLevels.hasOwnProperty(lvl)) {
      return logLevel = logLevels[lvl];
    }
  };

  setKeys = function(keys) {
    var key, _i, _len;
    if (keys == null) {
      keys = [];
    }
    keys = keys instanceof Array ? keys : [keys];
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      enable(key);
    }
  };

  transports = [];

  contains = function(ary, item) {
    var x, _i, _len;
    for (_i = 0, _len = ary.length; _i < _len; _i++) {
      x = ary[_i];
      if (item === x) {
        return true;
      }
    }
    return false;
  };

  isFunction = function(func) {
    return typeof func === 'function' || func instanceof Function;
  };

  isTransportValid = function(logger) {
    return isFunction(logger.log) && isFunction(logger.warn) && isFunction(logger.error);
  };

  addTransport = function(logger) {
    if (isTransportValid(logger)) {
      if (!contains(transports, logger)) {
        return transports.push(logger);
      }
    } else {
      return errorlet.raise({
        error: 'loglet.invalid_transport',
        message: "must have .log, .warn, and .error function."
      });
    }
  };

  addTransport(console);

  removeTransport = function(logger) {
    var i, x, _i, _len, _results;
    _results = [];
    for (i = _i = 0, _len = transports.length; _i < _len; i = ++_i) {
      x = transports[i];
      if (logger === x) {
        _results.push(transports.splice(i, 1));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  _log = function() {
    var args, trans, _i, _len;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = transports.length; _i < _len; _i++) {
      trans = transports[_i];
      trans.log.apply(trans, args);
    }
  };

  _warn = function() {
    var args, trans, _i, _len;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = transports.length; _i < _len; _i++) {
      trans = transports[_i];
      trans.warn.apply(trans, args);
    }
  };

  _error = function() {
    var args, trans, _i, _len;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = transports.length; _i < _len; _i++) {
      trans = transports[_i];
      trans.error.apply(trans, args);
    }
  };

  debug = function() {
    var args, k, key, regex;
    key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (logLevel <= logLevels.debug) {
      for (k in logKeys) {
        regex = logKeys[k];
        if (key.match(regex)) {
          _log('DEBUG ----------', key, JSON.stringify(args, null, 2));
        }
      }
    }
  };

  whisper = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  };

  talk = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  };

  speech = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  };

  scream = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return _log.apply(null, args);
  };

  warn = function() {
    var arg, args, list, _i, _len;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (logLevel <= logLevels.warn) {
      list = [];
      list.push("*** WARN START ***\n");
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        arg = args[_i];
        list.push(arg);
      }
      list.push("*** WARN END ***\n");
      _warn.apply(this, list);
    }
  };

  error = function() {
    var arg, args, list, _i, _len;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    list = [];
    list.push('****** ERROR START ******\n');
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      list.push(arg);
      if (arg != null ? arg.stack : void 0) {
        list.push(arg.stack);
      }
    }
    list.push('****** ERROR END   ******\n');
    _error.apply(this, list);
  };

  croak = function() {
    var arg, args, code, _i, _len;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    error.apply(null, args);
    code = -1;
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      if (arg != null ? arg.code : void 0) {
        code = arg.code;
      }
    }
    process.exit(code);
  };

  module.exports = {
    addTransport: addTransport,
    removeTransport: removeTransport,
    setLevel: setLevel,
    enable: enable,
    disable: disable,
    setKeys: setKeys,
    debug: debug,
    warn: warn,
    error: error,
    log: _log,
    whisper: whisper,
    talk: talk,
    speech: speech,
    scream: scream,
    croak: croak
  };

}).call(this);
